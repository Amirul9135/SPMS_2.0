<style>
    .btnPrint {
        position: fixed;
        bottom: .5vh;
        right: .5vw;
        z-index: 2;
    }

    .btnPrint:hover {
        color: white;
    }

    .text-uncenter-overide {
        text-align: left !important;
    }

    .mytb_highlight {
        background-color: rgb(181, 207, 255);
    }
</style>

<div class="side-app" onload="setup()">

    <button class="btnPrint btn btn-pill btn-outline-danger" type="button" onclick="printReport(event)">
        <i class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp; Save PDF
    </button>
    <div id="ejsData" data-totalmark="<%= tMark %>" data-grading="<%=assessment.grading%>"
        data-assigned="<%= JSON.stringify(assignedQuestion) %> "></div>
    <div class="row">
        <div class="col-md-12">
            <div class="card" id="Card_AssessmentDetail" data-asid="<%=assessment.assessmentId%>">
                <div class="card-header bg-info text-white">
                    <h3 class="card-title">
                        Assessment Detail
                    </h3>

                    <div class="card-options ">
                        </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12 text-center">
                            <h2><u><strong>
                                        <%=assessment.title%>
                                    </strong></u>
                            </h2>
                        </div>
                        <div class="col-md-12  border-bottom  border-top  p-2">
                            <%=assessment.description%>
                        </div>
                        <div class="col-md-12  border-bottom  border-top p-2">
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Subject Code</label>
                                    <input type="text" disabled class="form-control" value="<%=assessment.subject%> ">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Allowed Attempt Duration (minutes)</label>
                                    <input type="text" disabled class="form-control" value="<%=assessment.duration%> ">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12  border-bottom  border-top p-2">
                            <% var dtOpen=new Date(assessment.open)%>
                                <% var dtClose=new Date(assessment.close)%>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label class="form-label">Open Time</label>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        <i class="fa fa-calendar tx-16 lh-0 op-6 text-info"></i>
                                                    </div>
                                                </div><!-- input-group-prepend -->
                                                <input class="form-control " type="text" autocomplete="off" disabled
                                                    value="<%=dtOpen.toLocaleDateString('en-GB')%>">
                                            </div>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        <i class="fa fa-clock-o tx-16 lh-0 op-6 text-info"></i>
                                                    </div>
                                                </div><!-- input-group-prepend -->
                                                <input class="form-control" type="text" autocomplete="off" disabled
                                                    value="<%=dtOpen.toLocaleTimeString()%>">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Close Time</label>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        <i class="fa fa-calendar tx-16 lh-0 op-6 text-warning"></i>
                                                    </div>
                                                </div><!-- input-group-prepend -->
                                                <input class="form-control " type="text" autocomplete="off" disabled
                                                    value="<%=dtClose.toLocaleDateString('en-GB')%>">
                                            </div>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        <i class="fa fa-clock-o tx-16 lh-0 op-6 text-warning"></i>
                                                    </div>
                                                </div><!-- input-group-prepend -->
                                                <input class="form-control" type="text" autocomplete="off" disabled
                                                    value="<%=dtClose.toLocaleTimeString()%>">
                                            </div>
                                        </div>
                                    </div>
                        </div>
                    </div>

                </div>
            </div>



            <div class="card" id="Card_Attendance">
                <div class="card-header bg-info text-white">
                    <h3 class="card-title">Attendance Report&nbsp;
                    </h3>

                    <div class="card-options ">
                        </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                    </div>
                </div>
                <div class="card-body" id="content_attendance">
                    <div class="row">
                        <div class="col-md-12" style="justify-content: center;">
                            <div id="PChartAttendance" style=" height: 40vh;width: 40vh; margin: auto;"></div>
                        </div>
                        <div class="col-md-12">
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover text-nowrap mb-0" id="tbStudentAttend">
                                    <thead class="bg-primary">
                                        <tr>
                                            <th width="25%" class="text-white">Identification No.</th>
                                            <th width="50%" class="text-center text-white">Name</th>
                                            <th width="20%" class="text-center text-white">
                                                Class & School
                                            </th>
                                            <th width="5%" class="text-center text-white">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody class="mycustom_tbd">
                                    </tbody>
                                </table>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="card" id="Card_TotalMark">
                <div class="card-header bg-info text-white">
                    <h3 class="card-title">Performance Overview Report&nbsp;
                    </h3>
                    <div class="card-options ">
                        </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12 border-bottom py-2">
                            <div class="row">
                                <div class="col-md-6" style="justify-content: center;">
                                    <div id="PChartTotalMark" style=" height: 40vh;width: 40vh;margin: auto;"></div>
                                </div>
                                <div class="col-md-6" data-toggle="modal" data-target="#ModalGrading"
                                    title="click to change grading ranges">
                                    <label>
                                        <h5><u><strong>Mark Percentage (%) Range </strong></u>&nbsp;<i
                                                class="fa fa-info-circle"></i></h5>
                                    </label>
                                    <table class="table table-bordered table-hover text-nowrap mb-0">
                                        <thead class="bg-primary">
                                            <tr>
                                                <th class="text-white">From (%)</th>
                                                <th class="text-white">To (%)</th>
                                                <th class="text-white">Grade</th>
                                            </tr>
                                        </thead>
                                        <tbody id="tbodyGrade">
                                            <tr>
                                                <td>Start</td>
                                                <td>End</td>
                                                <td>Label</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 mt-1">
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover text-nowrap mb-0" id="tbTotalMark">
                                    <thead class="bg-primary">
                                        <tr>
                                            <th width="25%" class="text-white">ID & Name</th>
                                            <th width="20%" class="text-center text-white">
                                                Class & School
                                            </th>
                                            <th width="5%" class="text-center text-white">Attempt Duration</th>
                                            <th width="5%" class="text-center text-white">Mark</th>
                                            <th width="5%" class="text-center text-white">Grade</th>
                                        </tr>
                                    </thead>
                                    <tbody class="mycustom_tbd">
                                    </tbody>
                                </table>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-outline-success btn-pill" onclick="SubmitGrade()">Save Grades</button>
                </div>
            </div>

            <div class="card" id="Card_QuestionAnalysis">
                <div class="card-header bg-info text-white">
                    <h3 class="card-title">Question Analysis
                    </h3>
                    <div class="card-options ">
                        </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12 mb-2">
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Sort Category</label>

                                    <select class="form-control" id="QASortCatChange" onchange="QASortCatChange(event)">
                                        <option value="0">Mark</option>
                                        <option value="1">Time</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 mt-1">
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover text-nowrap mb-0"
                                    id="tbQuestionAnalysis">
                                    <thead class="bg-primary">
                                        <tr>
                                            <th class="text-white">Question Id</th>
                                            <% assignedQuestion.forEach(q=> { %>
                                                <th class="text-white text-center dt_th_Q">
                                                    <%= q.questionId %>
                                                </th>
                                                <%}); %>
                                        </tr>
                                    </thead>
                                    <tbody class="mycustom_tbd">
                                    </tbody>
                                    <tfoot>
                                        <!--
                                        <tr class="bg-info">
                                            <th class="text-white">Totals</th>
                                            <%// assignedQuestion.forEach(q=> { %>
                                                <th class="text-white text-center dt_tf_tot">
                                                </th>
                                                <%//}); %>
                                        </tr>-->
                                        <tr class="bg-info">
                                            <th class="text-white">Averages</th>
                                            <% assignedQuestion.forEach(q=> { %>
                                                <th class="text-white text-center dt_tf_avg">
                                                </th>
                                                <%}); %>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>

                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ModalGrading" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title w-100">
                    Grading
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-bordered table-hover text-nowrap mb-0">
                    <thead class="bg-primary">
                        <tr>
                            <th class="text-white">Start</th>
                            <th class="text-white">End</th>
                            <th class="text-white">Label</th>
                        </tr>
                    </thead>
                    <tbody id="tbodyGradeModal">
                        <tr>
                            <td>Start</td>
                            <td>End</td>
                            <td>Label</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="modal-footer text-center" style="justify-content: center;">
                <button class="btn btn-pill btn-outline-info" onclick="ValidateApplyGrade()">
                    Apply Change
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalQuestionDetail" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Question Detail</h5>
                &nbsp;&nbsp;
                <button type="button" class="btn-info-light btn-pill" id="MDQ_Editbtn" onclick="navEditQuestion(event)">
                    <i class="fa fa-edit"></i>
                    edit
                </button>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row" style="justify-content: center;">
                    <div class="row col-md-12">
                        <div class="col-md-6">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        Subject
                                    </div><!-- input-group-text -->
                                </div><!-- input-group-prepend -->
                                <input disabled class="form-control ui-timepicker-input" id="MQD_Subject" type="text">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        Topic
                                    </div><!-- input-group-text -->
                                </div><!-- input-group-prepend -->
                                <input disabled class="form-control ui-timepicker-input" id="MQD_Topic" type="text">
                            </div>
                        </div>
                    </div>
                    <div class="row col-md-12"><br></div>
                    <div id="MQD_imageContainer" class="row col-md-11"
                        style="white-space: nowrap;flex-wrap: nowrap;overflow-x: auto;">
                    </div>

                    <div class="col-md-12">
                        <br>
                    </div>
                    <div class="row col-md-12">
                        <div class="card">
                            <div id="MQD_QuestionText" class="card-body">asd question text</div>
                        </div>
                    </div>
                    <div class="row col-md-12">
                        <div class="card">
                            <div class="card-header" id="MQD_AnsType">Answer Type:</div>
                            <div class="card-body" id="MQD_AnswerList">
                                <table class="table table-bordered table-hover text-nowrap mb-0" id="MQD_ansTable">
                                    <thead class="bg-primary">
                                        <tr>
                                            <th width="60%" class="text-white">Answer Text</th>
                                            <th width="20%" class="text-center text-white">Mark(%)</th>
                                            <th width="20%" class="text-center text-white">
                                                Attachment
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody class="mycustom_tbd">
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <span class="text-muted" id="MQD_date">S</span>
            </div>
        </div>
    </div>
</div>

<script src="/res/script/echarts.min.js"></script>
<script src="/res/script/print.min.js"></script>
<script src="/res/script/questiondetail.js"></script>
<script>


    var PChartAttendance = echarts.init(document.getElementById('PChartAttendance'));
    var PChartTotalMark = echarts.init(document.getElementById('PChartTotalMark'))
    var option;
    var tbStudentAttend;
    var tbTotalMark;
    var assessmentId;
    var summaryData = null;
    var ejsData;
    var assignedQuestion;
    var tbQuestionAnalysis;
    var MQD_ansTable;

    async function setup() {
        loading(true)
        assessmentId = document.getElementById("Card_AssessmentDetail").dataset.asid;
        // await loadGradingFromStorage()


        ejsData = JSON.parse(JSON.stringify(document.getElementById("ejsData").dataset))
        document.getElementById("ejsData").remove()

        if (ejsData.grading) {
            grading = JSON.parse(ejsData.grading);
        }
        assignedQuestion = ejsData.assigned;
        console.log(ejsData)
        applyGradingTable()

        PChartAttendance.setOption(PChartAttendanceOpt);
        PChartTotalMark.setOption(PChartTotalMarkOpt)
        tbStudentAttend = new DataTable('#tbStudentAttend', {
            "columnDefs":
                [
                    { "targets": [3], "className": "text-center" }
                ],
            aLengthMenu: [
                [25, 50, 100, 200, -1],
                [25, 50, 100, 200, "All"]
            ],
            iDisplayLength: -1
        })
        tbTotalMark = new DataTable('#tbTotalMark', {
            "columnDefs":
                [
                    { "targets": [2, 3, 4], "className": "text-center" }
                ],
            aLengthMenu: [
                [25, 50, 100, 200, -1],
                [25, 50, 100, 200, "All"]
            ],
            iDisplayLength: -1
        })
        tbQuestionAnalysis = new DataTable('#tbQuestionAnalysis', {
            "columnDefs":
                [
                    {
                        "targets": [0], "orderable": false,
                        "className": "text-uncenter-overide studentcol",
                        "render": function (data, type, row, meta) {
                            return data;
                        }
                    },
                    {
                        "targets": "_all",
                        "type": "marktime",
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            if (data == 0) {
                                return 'NA'
                            }
                            var div = document.createElement('div');
                            var hidden = '<span style="display:none">';
                            div.innerHTML = data
                            return ((div.children[0].classList.contains('data_time')) ? timeString(parseFloat(div.children[0].innerHTML) * 1000) + '<span style="display:none">' + div.children[2].innerHTML + '</span>'
                                : div.children[0].innerHTML)
                                + "/" + div.children[1].innerHTML + "<br>"
                                + ((div.children[2].classList.contains('data_time')) ? timeString(parseFloat(div.children[2].innerHTML) * 1000) + '<span style="display:none">' + div.children[2].innerHTML + '</span>'
                                    : div.children[2].innerHTML)

                        }
                    }
                ],
            aLengthMenu: [
                [10, 20, 40, 100, -1],
                [10, 20, 40, 100, "All"]
            ],
            iDisplayLength: -1
        })


        MQD_ansTable = new DataTable('#MQD_ansTable');
        $('#tbQuestionAnalysis').on('mouseenter', 'td', function () {
            var colIdx = tbQuestionAnalysis.cell(this).index().column;

            $(tbQuestionAnalysis.cells().nodes()).removeClass('mytb_highlight');
            $(tbQuestionAnalysis.column(colIdx).nodes()).addClass('mytb_highlight');
        });
        $('#tbQuestionAnalysis').on('click', 'td', function () {
            if (!this.classList.contains('studentcol')) {

                viewQuestionDetail(document.getElementById('tbQuestionAnalysis').querySelector('thead').children[0].children[tbQuestionAnalysis.cell(this).index().column].innerHTML.trim());

            }
            //     $(tbQuestionAnalysis.cells().nodes()).removeClass('mytb_highlight');
            //   $(tbQuestionAnalysis.column(colIdx).nodes()).addClass('mytb_highlight');
        });
        loadQAanalysis()
        applyGradingTable()
        loadSummaryData()
        loading(false)
    }


    function loadAttendance() {
        var present = 0
        var absent = 0
        tbStudentAttend.clear()
        summaryData.forEach(s => {

            tbStudentAttend.row.add([
                s.studentId,
                s.name,
                '<span class="text-muted">' + s.abbrv + "</span><br>" + s.className,
                (s.startAttempt == null) ? "Absent" : "Present"
            ])
            if (s.startAttempt == null) {
                absent++
            }
            else {
                present++
            }
        })
        tbStudentAttend.draw()
        PChartAttendanceOpt.series[0].data = [
            { "value": present, "name": "Present" },
            { "value": absent, "name": "Absent" }
        ]
        PChartAttendanceOpt.title.subtext = "Total of " + summaryData.length + " Participants"
        PChartAttendance.setOption(PChartAttendanceOpt);

    }

    function loadSummaryData() {
        Server.request('GET', '/api/assessment/summary?id=' + assessmentId, null, true).then(function (result) {
            result = JSON.parse(result)
            result.forEach(student => {
                student.percent = student.totalMark / ejsData.totalmark * 100
                student.timeTaken = new Date(student.endAttempt).getTime() - new Date(student.startAttempt).getTime()
            })
            summaryData = result
            loadAttendance()
            loadMarks()
        }).catch(async function (err) {
            var msg = ""
            try {
                err = JSON.parse(err)
                msg = err.error
            }
            catch {

            }
            await Swal.fire({
                type: "error",
                title: "unable to load assessment data",
                text: msg
            })
            navigate('/pastAssessment')
        })

    }

    function loadMarks() {
        GradeStudents()
        tbTotalMark.clear()
        var gdata = JSON.parse(JSON.stringify(grading))
        gdata.forEach(g => { //convert to echart format data
            g.value = 0
            delete g.start
            delete g.end
            g.name = g.label
            delete g.label
        })
        var totalAllStud = 0;
        summaryData.forEach(s => {
            tbTotalMark.row.add([
                s.name + "<br>" + s.studentId,
                '<span class="text-muted">' + s.abbrv + "</span><br>" + s.className,
                '<span style="display:none">' + s.timeTaken + '</span>' + timeString(s.timeTaken),
                s.totalMark + " (" + s.percent + "&)",
                '<span style="display:none">' + s.grade.index + '</span>' + s.grade.label
            ])
            totalAllStud += parseFloat(s.totalMark)
            gdata.forEach(g => {
                if (g.name.trim() == s.grade.label.trim()) {
                    g.value++;
                }
            })
        })
        totalAllStud = totalAllStud / summaryData.length

        PChartTotalMarkOpt.title.subtext = "Full Mark : " + ejsData.totalmark + '\nAverage Mark : ' + totalAllStud
        tbTotalMark.draw()
        gdata = gdata.filter(item => item.value !== 0) //yang ada value je
        PChartTotalMarkOpt.series[0].data = gdata
        PChartTotalMark.setOption(PChartTotalMarkOpt)
    }

    async function loadQAanalysis() {
        var result = await Server.request("GET", "/api/assessment/QAanalysis?asId=" + assessmentId, null, true).catch(function (err) {
            console.log(err)
            return;
        })
        if (!result) {
            Message.createNew('Error', "failed to load question analysis", 3)
            return;
        }
        result = JSON.parse(result)
        var allQuestion = JSON.parse(ejsData.assigned)
        //tbQuestionAnalysis
        var QAStudent = {}
        var studentName = {}
        result.forEach(res => {
            var qdata = {}
            qdata.id = res.questionId
            qdata.mark = res.mark
            qdata.fullMark = res.fullMark
            qdata.time = res.time
            if (!QAStudent.hasOwnProperty(res.accountId)) {
                QAStudent[res.accountId] = []
            }
            if (!studentName.hasOwnProperty(res.accountId)) {
                studentName[res.accountId] = res.name
            }
            QAStudent[res.accountId].push(qdata)
        })
        var allrowData = []
        Object.keys(QAStudent).forEach(s => {
            var rowData = []
            rowData.push(studentName[s] + '<br><span class="text-muted">' + s + '</span>');
            for (var i = 0; i < allQuestion.length; i++) {
                var found = false
                for (var j = 0; j < QAStudent[s].length; j++) {
                    if (allQuestion[i].questionId == QAStudent[s][j].id) {
                        if (!allQuestion[i].totalMark) {
                            allQuestion[i].totalMark = 0;
                        }
                        if (!allQuestion[i].totalTime) {
                            allQuestion[i].totalTime = 0
                        }
                        allQuestion[i].totalMark += QAStudent[s][j].mark
                        allQuestion[i].totalTime += QAStudent[s][j].time
                        var string = '<span>' + QAStudent[s][j].mark + '</span><span>' + QAStudent[s][j].fullMark + '</span><span class="data_time">' + QAStudent[s][j].time + '</span>'

                        /*var string = /* '<span style="display:none"></span>' + QAStudent[s][j].mark + '/' + QAStudent[s][j].fullMark + '<br>' + timeString(QAStudent[s][j].time * 1000)
                        //  + '<span style="display:none" data-time="' + QAStudent[s][j].time + '" data-mark="' + QAStudent[s][j].mark + '" class="dt_sort_data">'
                        // + QAStudent[s][j].mark + '</span>'
                        //console.log(string)*/
                        rowData.push(string)
                        found = true
                    }
                }
                if (!found) {
                    rowData.push(0);
                }
            }
            allrowData.push(rowData)
        })
        var studCount = Object.keys(QAStudent).length
        tbQuestionAnalysis.clear()
        allrowData.forEach(r => {
            tbQuestionAnalysis.row.add(r)
        })
        tbQuestionAnalysis.draw()

        //apply acerages
        var th = document.getElementById('tbQuestionAnalysis').querySelectorAll('.dt_th_Q');
        var tfo = document.getElementById('tbQuestionAnalysis').querySelectorAll('.dt_tf_avg');
        var tft = document.getElementById('tbQuestionAnalysis').querySelectorAll('.dt_tf_tot');
        for (var i = 0; i < th.length; i++) {
            var curQ = parseInt(th[i].innerHTML.trim())
            for (var j = 0; j < allQuestion.length; j++) {
                if (allQuestion[j].questionId == curQ) {
                    // tft[i].innerHTML = allQuestion[j].totalMark + '<br>[' + timeString(allQuestion[j].totalTime * 1000) + ']'
                    tfo[i].innerHTML = allQuestion[j].totalMark / studCount + '<br>[' + timeString(allQuestion[j].totalTime / studCount * 1000) + ']'
                }
            }
        }

    }

    //sortings 
    var isSortMark = true;
    jQuery.extend(jQuery.fn.dataTableExt.oSort, {
        "marktime-asc": function (a, b) {
            return timeMarkSort(a, b, true);
        },
        "marktime-desc": function (a, b) {
            return timeMarkSort(a, b, false);
        },
    })
    function timeMarkSort(a, b, isAsc) {
        if (a == 'NA') {
            return 1
        }
        if (b == 'NA') {
            return -1
        }
        //should a be after b 1, before b -1 or same 0
        if (isSortMark) {
            var ma = parseFloat(a.split('/')[0])
            var mb = parseFloat(b.split('/')[0])

            if (ma == mb) {
                return 0
            }
            if (ma > mb) {
                return (isAsc) ? 1 : -1
            }
            else {
                return (isAsc) ? -1 : 1
            }
        }
        else {
            var ta = parseFloat(a.split('<span style="display:none">')[1].replace('</span>'))
            var tb = parseFloat(b.split('<span style="display:none">')[1].replace('</span>'))
            if (ta == tb) {
                return 0
            }
            if (ta > tb) {
                return (isAsc) ? 1 : -1
            }
            else {
                return (isAsc) ? -1 : 1
            }

        }
    }

    function QASortCatChange(e) {
        isSortMark = e.target.value == '0'
    }


    function applyGradingTable() {
        var tbgrade = document.getElementById('tbodyGrade')
        var tbgradeModal = document.getElementById('tbodyGradeModal')
        tbgrade.innerHTML = ""
        tbgradeModal.innerHTML = ""
        var strHTML = ""
        var strHTML2 = ""
        grading.forEach(g => {
            strHTML += "<tr><td>" + g.start + "</td><td>" + g.end + "</td><td>" + g.label + "</td></tr>"
            strHTML2 += "<tr><td>" + inputGrade + ' value="' + g.start + '" '
                + "></td><td>" + inputGrade + ' value="' + g.end + '" ' + "></td><td>"
                + inputGradeLbl + ' value="' + g.label + '" ' + "></td></tr>"
        })
        tbgrade.innerHTML = strHTML;
        tbgradeModal.innerHTML = strHTML2
    }

    async function ValidateApplyGrade() {
        var valid = GradeValidation()
        if (!valid) {
            await Swal.fire({
                type: "error",
                title: "Invalid ranges",
                html: "Ranges start/end must be unique and not redundant<br>"
                    + "Ranges must cover all value from 0 to 100"
            })
        }
        else {
            Message.createNew('Info', 'Grading applied for preview, use the Save Grades button to submit gradings into the system', 1)
            applyGradingTable()
            $('#ModalGrading').modal('hide')
            loadMarks()
        }
    }

    function GradeValidation() {
        //load to json
        var tmpArr = []
        var newGradeData = []
        var tbg = document.getElementById('tbodyGradeModal')
        var rows = tbg.querySelectorAll('tr');
        for (var i = 0; i < rows.length; i++) {
            var tmpJSON = {}
            var st = parseInt(rows[i].children[0].children[0].value.trim())
            if (tmpArr.includes(st)) {
                return false
            }
            tmpArr.push(st)
            tmpJSON["start"] = st
            var ed = parseInt(rows[i].children[1].children[0].value.trim())
            if (tmpArr.includes(ed)) {
                return false
            }
            tmpArr.push(ed)
            tmpJSON["end"] = ed
            tmpJSON["label"] = rows[i].children[2].children[0].value.trim()
            newGradeData.push(tmpJSON)
        }
        for (var i2 = 0; i2 < tmpArr.length; i2++) {
            if (tmpArr[i2] == 100 || tmpArr[i2] == 0) {
                //0 100 no need check memang xde + - 1 ujung
                continue
            }
            if (!tmpArr.includes(tmpArr[i2] + 1) && !tmpArr.includes(tmpArr[i2] - 1)) {
                return false //kalau start mesti ada end yang -1, kalau end mesti ada start yang +1
                //ensure all number can fall within specified range
            }
        }
        grading = newGradeData
        var cur = localStorage.getItem('grading')
        if (cur) {//kalau dah ade, ambil letak balek yg dah tambah
            cur = JSON.parse(cur)
            cur["as" + assessmentId.toString()] = grading
            localStorage.setItem('grading', JSON.stringify(cur))
        }
        else {//kalau xde buat baru
            var newObj = {}
            newObj["as" + assessmentId.toString()] = grading
            localStorage.setItem('grading', JSON.stringify(newObj))
        }
        return true
    }


    function GradeStudents() {
        summaryData.forEach(student => {
            student.grade = Grade(student.percent)
        })
    }

    function Grade(mark) {
        for (var i = 0; i < grading.length; i++) {
            if (mark >= grading[i].start && mark <= grading[i].end)
                return { index: i, label: grading[i].label }
        }
    }

    window.addEventListener('resize', function () {
        PChartAttendance.resize()
        PChartTotalMark.resize()
    });

    function printReport(e) {

        document.getElementById('PChartAttendance').style.height = "20vh"
        document.getElementById('PChartAttendance').style.width = "20vh"
        e.target.style.display = "none"
        PrintMode(true)
        window.print()
        PrintMode(false)
        e.target.style.display = "initial"
        document.getElementById('PChartAttendance').style.height = "40vh"
        document.getElementById('PChartAttendance').style.width = "40vh"
    }

    function PrintMode(mode) {
        if (mode) {
            $(".dataTables_filter").hide();
            $(".dataTables_length").hide();
            $(".dataTables_paginate").hide();
            $(".card-footer").hide();
        }
        else {
            $(".dataTables_filter").show();
            $(".dataTables_length").show();
            $(".dataTables_paginate").show();
            $(".card-footer").show();
        }
    }


    async function SubmitGrade() {
        var action = await Swal.fire({
            type: 'warning',
            html: 'Grae will be saved and displayed to student<br>Are you sure?'
        })
        if (action.value != true) {
            return;
        }
        var data = {}
        data.assessmentId = assessmentId
        data.range = grading
        data.fullMark = parseFloat(ejsData.totalmark)
        Server.request('POST', '/api/assessment/grade', data, true).then(function (result) {
            Swal.fire({
                type: 'success',
                title: 'Assessment has been graded'
            })
        }).catch(function (err) {
            Message.createNew('Error', "failed to apply grade", 3)
        })
    }


    var inputGradeLbl = '<input type="text" maxlength="2" '
    var inputGrade = '<input type="number" min="0" max="100" onkeyup="enforceMinMax(this)" '
    var grading = [
        { start: 90, end: 100, label: "A+" },
        { start: 80, end: 89, label: "A" },
        { start: 70, end: 79, label: "A-" },
        { start: 60, end: 69, label: "B" },
        { start: 40, end: 59, label: "C" },
        { start: 0, end: 39, label: "D" }
    ]
    //dalam echart, label name, value kira dari data students yg fall in range


    var PChartAttendanceColor = ['#57ff5a', '#ff5757'];
    var PChartAttendanceOpt = {
        title: {
            text: 'Attendance Summary',
            left: 'center',
            subtext: "Total of ",
        },
        tooltip: {
            trigger: 'item'
        },
        legend: {
            orient: 'horizontal',
            bottom: 10,
        }, grid: { containLabel: true },
        series: [
            {
                name: 'Student Attendence',
                type: 'pie',
                radius: '50%',
                center: ['50%', '50%'],
                label: {
                    formatter: function (d) {
                        if (d.data.value > 0)
                            return d.name + "\n" + d.data.value + '(' + d.percent + '%)';
                    }
                },
                color: PChartAttendanceColor,
                data: [
                    { value: 1048, name: 'Present' },
                    { value: 735, name: 'Absent' }
                ],
                emphasis: {
                    scale: true,
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
    }

    var PChartTotalMarkOpt = {
        title: {
            text: 'Total Mark Summary',
            left: 'center'
        },
        tooltip: {
            trigger: 'item'
        },
        legend: {
            orient: 'horizontal',
            bottom: 10,
        },
        series: [
            {
                name: 'Access From',
                type: 'pie',
                radius: '50%',
                center: ['50%', '50%'],
                labelLine: { show: true, smooth: true },
                label: {
                    formatter: function (d) {
                        if (d.data.value > 0) {
                            return d.name + "\n" + d.data.value;
                        }
                        else {
                            return d.name
                        }
                    }
                },
                data: [
                    { value: 1048, name: 's' },
                    { value: 735, name: 'Absent' }
                ],
                emphasis: {
                    scale: true,
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
    }
</script>