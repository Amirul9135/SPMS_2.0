<style>
    .btnPrint {
        position: fixed;
        bottom: .5vh;
        right: .5vw;
        z-index: 2;
    }

    .btnPrint:hover {
        color: white;
    }
</style>
<div class="side-app" onload="setup()">
    <button onclick="testFunc()">test</button>

    <button class="btnPrint btn btn-pill btn-outline-danger" type="button" onclick="printReport(event)">
        <i class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp; Save PDF
    </button>
    <div id="ejsData"></div>
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h3 class="card-title">
                        Performance Report Analysis
                    </h3>
                    <div class="card-options ">
                        </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">
                                        Report Type
                                    </label>
                                    <select class="form-control" onchange="rtypeChange(event)">
                                        <option value="1">Overall Performance</option>
                                        <option value="2">Performance for Specific Subject</option>
                                    </select>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">
                                        Subject
                                    </label>
                                    <div class="select-search">
                                        <input disabled id="selectSubject" type="text" class="form-control"
                                            data-list="idListSubj" onkeyup="SSKeyHandler(event)"
                                            onfocus="SSFocus(event)" onblur="SSFocus(event)"
                                            onchange="resetChartData()">
                                        <ul onclick="SSItemClick(event)" id="idListSubj" data-selected="-1">
                                            <% subjects.forEach(subj=> {%>
                                                <li id="<%= subj['subjectCode']%>">
                                                    <%=subj["title"]%>
                                                </li>
                                                <%});%>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">

                                    <label class="form-label">Month Range</label> <input
                                        class="form-control fc-datepicker hasDatepicker" placeholder="MM/DD/YYYY"
                                        type="text" name="daterange" id="txtAsDateRange" />
                                    <label class="form-label mt-0 text-muted" id="lblDtDura"></label>
                                </div>
                            </div>
                            <div class="row text-center mt-1" style="justify-content: center;">
                                <button class="btn btn-pill btn-outline-primary" onclick="btnAddDataHandler()"><i
                                        class="fa fa-plus" aria-hidden="true"></i> Data</button>
                            </div>
                        </div>
                        <div class="col-md-12 mt-5" style="justify-content: center;">
                            <div id="LineChart" style="height: 80vh;width: 100%;"></div>
                        </div>

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ModalAreaInput" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title w-100">
                    Load Area Specific Student Performance Data
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4">
                            <label for="exampleInputnumber">Area</label>
                            <div class="select-search">
                                <input id="SSArea" type="text" autocomplete="off" disabled class="form-control"
                                    data-list="idListArea" onkeyup="SSKeyHandler(event)" onfocus="SSFocus(event)"
                                    onblur="SSFocus(event)">
                                <ul onclick="SSItemClick(event)" id="idListArea" data-selected="-1">
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="exampleInputnumber">Postcode</label>

                            <div class="select-search">
                                <input id="SSPostcode" type="text" autocomplete="off" disabled class="form-control"
                                    data-list="idListPostcode" onkeyup="SSKeyHandler(event)" onfocus="SSFocus(event)"
                                    onblur="SSFocus(event)" onplay="changePostcode(event)">
                                <ul onclick="SSItemClick(event)" id="idListPostcode" data-selected="-1">
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="exampleInputnumber">State</label>
                            <select id="selectState" class="form-control select2" onchange="changeState(event)">
                                <option value="-1">Choose State</option>
                                <% states.forEach(state=> {%>
                                    <option value="<%= state['state_code']%>">
                                        <%=state["state_name"]%>
                                    </option>
                                    <%});%>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer text-center" style="justify-content: center;">
                <button class="btn btn-pill btn-outline-info">
                    <i class="fa fa-plus" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script src="/res/assets/plugins/bootstrap-daterangepicker/moment.min.js"></script>
<script src="/res/assets/plugins/bootstrap-daterangepicker/daterangepicker.js"></script>
<script src="/res/script/echarts.min.js"></script>
<script>

    $('input[name="daterange"]').daterangepicker({
        startDate: new Date(), // after open picker you'll see this dates as picked
        endDate: new Date(),
        maxDate: new Date(),
        locale: {
            format: 'MMM YYYY'
        }
    }, function (start, end, label) {
        if (start.year() == end.year()) {
            if (start.month() == end.month()) {
                Swal.fire({
                    type: 'error',
                    title: 'Invalid Month',
                    text: 'Start and end of month range cannot be same'
                })
                return
            }
        }
        resetChartData()
    });


    function testFunc() {
        var newt = newSeries('btn', data3)
        lineChartOption.series.push(newt)
        LineChart.setOption(lineChartOption)
        console.log(LineChart.getModel().getSeries().map(s => {
            return {
                seriesIndex: s.seriesIndex,
                seriesColor: LineChart.getVisual({
                    seriesIndex: s.seriesIndex
                }, 'color')
            }
        }))
    }
    var LineChart;

    function setup() {
        LineChart = echarts.init(document.getElementById('LineChart'))
        redrawChart()
    }

    function btnAddDataHandler() {
        $('#ModalAreaInput').modal('show')
    }

    function rtypeChange(e) {
        if (e.target.value == '2') {
            document.getElementById('selectSubject').disabled = false
        }
        else {
            document.getElementById('selectSubject').disabled = true
        }
        resetChartData()
    }

    function resetChartData() {
        console.log('redr')
        lineChartOption.series = null
        redrawChart()
    }

    function redrawChart() {
        console.log(lineChartOption)
        LineChart.setOption(lineChartOption, true)
    }
    window.addEventListener('resize', function () {
        setTimeout(function () {

            LineChart.resize()
        }, 500)
    });

    //chart stuff
    var data = [
        { '2017-04-10T20:40:33Z': [{ "1": 50 }, { "2": 80 }] },
        { '2017-04-10T20:40:33Z': [{ "1": 50 }, { "2": 80 }] },
        { '2017-04-10T20:40:33Z': [{ "1": 50 }, { "2": 80 }] },
        { '2017-04-10T20:40:33Z': [{ "1": 50 }, { "2": 80 }] },
        { '2017-04-10T20:40:33Z': [{ "1": 50 }, { "2": 80 }] },
        { '2017-04-10T20:40:33Z': [{ "1": 50 }, { "2": 80 }] }
    ];

    var data1 = [
        ['2017-05-10T20:40:33Z', 33],
        ['2017-08-10T20:40:53Z', 19],
        ['2018-08-10T20:44:03Z', 9],
        ['2018-09-10T20:41:03Z', 18],
        ['2019-04-10T20:45:03Z', 11]
    ]
    var data2 = [
        ['2017-05-20T20:40:33Z', 33],
        ['2017-07-10T20:40:53Z', 19],
        ['2018-09-10T20:44:03Z', 50],
        ['2018-12-10T20:41:03Z', 55],
        ['2019-04-10T20:45:03Z', 22]
    ]
    var data3 = [
        ['2017-05-20T20:40:33Z', 13],
        ['2017-07-10T20:40:53Z', 19],
        ['2018-09-10T20:44:03Z', 66],
        ['2018-12-10T20:41:03Z', 98],
        ['2019-04-10T20:45:03Z', 33]
    ]

    var data = [
        ['2017-04-10T20:40:33Z', 1, 5, 99],
        ['2017-08-10T20:40:53Z', 2, 3, 20],
        ['2018-04-10T20:41:03Z', 4, null, 31],
        ['2018-08-10T20:44:03Z', 5, 1, 40],
        ['2019-04-10T20:45:03Z', 6, 0, 50]
    ];
    var lineChartOption = {
        title: {
            text: 'Performance Analysis'
        },
        tooltip: {
            trigger: 'axis'
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        toolbox: {
            feature: {
                saveAsImage: {}
            }
        },
        xAxis: {
            type: 'time'
        },
        yAxis: {
            type: 'value'
        },
        series: [
            {
                name: 'mine',
                type: 'line',
                smooth: true,
                data: data1
            },
            {
                name: 'lain panjang panjang nama',
                type: 'line',
                smooth: true,
                data: data2
            }
        ]
    }

    function newSeries(name, inpData) {
        return {
            name: name,
            type: 'line',
            smooth: true,
            data: inpData
        }

    }

    //address

    function resetPostcode() {
        document.getElementById("SSPostcode").disabled = true;
        document.getElementById("SSPostcode").value = "";
        document.getElementById("idListPostcode").innerHTML = ""
        document.getElementById("idListPostcode").dataset.selected = "-1"
    }
    function resetArea() {
        document.getElementById("SSArea").disabled = true;
        document.getElementById("SSArea").value = "";
        document.getElementById("idListArea").innerHTML = ""
        document.getElementById("idListArea").dataset.selected = "-1"
    }

    function changePostcode(e) {
        if (e.target.value == '-1') {
            resetArea()
            return;
        }
        document.getElementById("SSArea").disabled = false;

        var postcode = document.getElementById(e.target.dataset.list).dataset.selected;
        getAreaInPostcode(postcode).then(function (result) {
            result = JSON.parse(result)
            var strhtml = ""
            result.forEach(area => {
                strhtml += '<li id="' + area.areaId + '">' + area.areaName + '</li>'
            });
            document.getElementById("idListArea").innerHTML = strhtml
        }).catch(function (err) {
            console.log(err)
        })
        console.log(postcode)
    }

    function changeState(e) {
        resetArea()
        resetPostcode()
        if (e.target.value == '-1') {
            return;
        }
        document.getElementById("SSPostcode").disabled = false;
        getPostcodes(e.target.value).then(function (result) {
            result = JSON.parse(result)
            var strhtml = ""
            result.forEach(pcode => {
                strhtml += '<li id="' + pcode.postcode + '">' + pcode.postcode + ' ' + pcode.postOffice + '</li>'
            });
            document.getElementById("idListPostcode").innerHTML = strhtml
        }).catch(function (err) {
            console.log(err)
        })
    }

</script>