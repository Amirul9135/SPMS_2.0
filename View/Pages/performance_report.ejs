<link rel="stylesheet" href="/res/assets/leaflet/leaflet.css">
<script src="/res/assets/leaflet/leaflet.min.js"></script>
<style>
    .btnPrint {
        position: fixed;
        bottom: .5vh;
        right: .5vw;
        z-index: 2;
    }

    .btnPrint:hover {
        color: white;
    }

    .modal-xl {
        max-width: 80%;
    }

    button * {
        pointer-events: none;
    }
</style>
<div class="side-app" onload="setup()">

    <button class="btnPrint btn btn-pill btn-outline-danger" type="button" onclick="printReport(event)">
        <i class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp; Save PDF
    </button>
    <div id="ejsData"></div>
    <div class="row">
        <!--
        <div class="card">
            <div class="card-header bg-info text-white">
                <h3 class="card-title">
                    Report Setting
                </h3>
                <div class="card-options ">
                    </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="row text-center mt-1" style="justify-content: center;">

                            <button class="btn btn-pill btn-outline-warning" onclick="resetChartData()"
                                style="width: 100px;display: none;" id="btnReset">Reset</button>
                            <div class="row" id="btnData">
                                <button class="btn btn-pill btn-outline-primary" data-toggle="modal"
                                    data-target="#ModalAreaInput"><i class="fa fa-plus" aria-hidden="true"></i>
                                    Specific Area Data</button>
                                <button class="btn btn-pill btn-outline-primary" data-toggle="modal"
                                    data-target="#ModalAddSchool"><i class="fa fa-plus" aria-hidden="true"></i>School
                                    Data</button>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </div>-->
        <div class="card">
            <div class="card-header bg-info text-white">
                <h3 class="card-title">
                    <div class="row">
                        <div>
                            <div class="form-label">
                                <h4>Performance Analysis For Subject &nbsp;</h4>
                            </div>
                        </div>
                        <div>
                            <div class="select-search">
                                <input id="selectSubject" type="text" class="form-control" autocomplete="off"
                                    data-list="idListSubj" onkeyup="SSKeyHandler(event)" onfocus="SSFocus(event)"
                                    onblur="SSFocus(event)" onchange="resetChartData()">
                                <ul onclick="SSItemClick(event)" id="idListSubj" data-selected="-1"
                                    style="color: black;">
                                    <% subjects.forEach(subj=> {%>
                                        <li id="<%= subj['subjectCode']%>">
                                            <%=subj["title"]%>
                                        </li>
                                        <%});%>
                                </ul>
                            </div>
                        </div>
                        <div>
                            <div class="form-label">
                                <h4>&nbsp;, Year&nbsp;</h4>
                            </div>
                        </div>
                        <div>
                            <select class="form-control MyYearSelect" id="selYear" style="display: inline-block;"
                                onchange="resetChartData()">
                            </select>
                        </div>
                    </div>

                </h3>
                <div class="card-options ">
                    </button><i class="fe fe-chevron-up text-white" onclick="toggle_card(event)"></i>
                </div>
            </div>
            <div class="card-body">
                <div class="col-md-12">
                    <div class="row text-center mt-1" style="justify-content: center;">

                        <div class="row" id="btnData">
                            <button class="btn btn-pill btn-outline-warning" style="display: none;"
                                onclick="resetChartData()" id="btnReset">Reset</button>
                            &nbsp;
                            <button class="btn btn-pill btn-outline-primary" data-toggle="modal"
                                data-target="#ModalAreaInput"><i class="fa fa-plus" aria-hidden="true"></i>
                                Specific Area Data</button>
                            &nbsp;
                            <button class="btn btn-pill btn-outline-primary" data-toggle="modal"
                                data-target="#ModalAddSchool"><i class="fa fa-plus" aria-hidden="true"></i> School
                                Data</button>
                            &nbsp;
                            <button class="btn btn-pill btn-outline-primary" onclick="addStudentHandler()"><i
                                    class="fa fa-plus" aria-hidden="true"></i> Student</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-12 mt-5" style="justify-content: center;">
                    <div id="LineChart" style="height: 80vh;width: 100%;"></div>
                </div>
            </div>
        </div>
        <div class="card" id="datacard">
            <div class="card-body">
                <div class="table-responsive">
                    <table id="dtbDatas" class="table table-bordered table-hover text-nowrap mb-0">
                        <thead>
                            <tr>
                                <td></td>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card" id="mapdiv">
            <div class="card-body">
                <div id="mapdiv" style="height: 60vh;width: 100%;"></div>
            </div>
        </div>

    </div>
</div>
<div class="modal fade" id="ModalAreaInput" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title w-100">
                    Load Area Specific Student Performance Data
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="form-group">
                    <div class="row">

                        <div class="col-md-4">
                            <label for="exampleInputnumber">State</label>
                            <select id="selectState" class="form-control select2" onchange="changeState(event)">
                                <option value="-1">Choose State</option>
                                <% states.forEach(state=> {%>
                                    <option value="<%= state['state_code']%>">
                                        <%=state["state_name"]%>
                                    </option>
                                    <%});%>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="exampleInputnumber">Postcode</label>

                            <div class="select-search">
                                <input id="SSPostcode" type="text" autocomplete="off" disabled class="form-control"
                                    data-list="idListPostcode" onkeyup="SSKeyHandler(event)" onfocus="SSFocus(event)"
                                    onblur="SSFocus(event)" onplay="changePostcode(event)">
                                <ul onclick="SSItemClick(event)" id="idListPostcode" data-selected="-1">
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="exampleInputnumber">Area</label>
                            <div class="select-search">
                                <input id="SSArea" type="text" autocomplete="off" disabled class="form-control"
                                    data-list="idListArea" onkeyup="SSKeyHandler(event)" onfocus="SSFocus(event)"
                                    onblur="SSFocus(event)">
                                <ul onclick="SSItemClick(event)" id="idListArea" data-selected="-1">
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                    </div>
                </div>
            </div>
            <div class="modal-footer text-center" style="justify-content: center;">
                <button class="btn btn-pill btn-outline-info" onclick="loadNewAreaData()">
                    <i class="fa fa-plus" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalAddSchool" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title w-100">
                    Load School Students Performance Data
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="card">
                    <div class="card-header text-white bg-info">
                        <h3 class="card-title">Find School</h3>
                        <div class="card-options">
                            <a class="card-options-collapse" data-toggle="card-collapse" onclick="toggle_card(event)"><i
                                    class="fe fe-chevron-up text-white"></i></a>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">

                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label mt-0">State</label>
                                    <select id="selectState" class="form-control select2"
                                        onchange="changeStateSchool(event)">
                                        <option value="-1">Choose State</option>
                                        <% states.forEach(state=> {%>
                                            <option value="<%= state['state_code']%>">
                                                <%=state["state_name"]%>
                                            </option>
                                            <%});%>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label mt-0">County</label>
                                    <select id="selectCounty" class="form-control select2">

                                    </select>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="form-label mt-0">&nbsp;</label>
                                            <button onclick="loadSchool()" class="btn btn-pill btn-info-light"><b><i
                                                        class="fa fa-search">&nbsp;Search</i></b>

                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">List of School</h3>
                    </div>

                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover text-nowrap mb-0" id="SchoolTable">
                                <thead class="bg-primary">
                                    <tr>
                                        <th width="70%" class="text-white">School Name</th>
                                        <th width="20%" class="text-center text-white">Abbreviation</th>
                                        <th width="10%" class="text-white">Load</th>
                                    </tr>
                                </thead>
                                <tbody class="mySchool_tbd">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/res/assets/plugins/bootstrap-daterangepicker/moment.min.js"></script>
<script src="/res/assets/plugins/bootstrap-daterangepicker/daterangepicker.js"></script>
<script src="/res/assets/plugins/date-picker/jquery-ui.js"></script>
<script src="/res/script/echarts.min.js"></script>
<script>

    var LineChart;
    var dtbDatas;
    var map
    var initialCoord = new L.LatLng(4.123425, 102.240730)

    function setup() {
        LineChart = echarts.init(document.getElementById('LineChart'))
        $("#datepicker").datepicker({
            format: "yyyy",
            viewMode: "years",
            minViewMode: "years"
        });
        dtbDatas = new DataTable("#dtbDatas");

        tableSchool = new DataTable("#SchoolTable", {
            // options 
            "columnDefs":
                [
                    { "targets": [2], "className": "text-center" },
                    { "targets": [2], "orderable": false, "searching": false }
                ]
        });
        yearSelector()

        map = L.map('mapdiv').setView([51.505, -0.09], 7); //(?,?) z
        map.panTo(initialCoord)
        redrawChart()
    }


    function yearSelector() {
        var strhtml = ""
        var i = new Date().getFullYear()
        console.log(i)
        while (i > 2000) {

            strhtml += '<option value="' + i.toString() + '">' + i.toString() + '</option>'
            console.log(i)
            i--
        }
        console.log(strhtml)
        //     for (var i = new Date().getFullYear(); i >= 2000; i--) {
        //        strhtml += '<option value="' + i + "'>" + i + '</option>'
        //   strhtml.trim()
        //   }
        document.querySelectorAll(".MyYearSelect").forEach(sel => {
            console.log(sel)
            sel.innerHTML = strhtml
        })
    }



    function newPolygon() {
        return [{
            "type": "Polygon",
            "coordinates": [[]]
        }]
    }

    function loadDataToTable() {
        var curData = JSON.parse(JSON.stringify(LineChart.getOption().series))
        dtbDatas.destroy()
        var dtb = document.getElementById("dtbDatas")
        dtb.children[0].innerHTML = "<tr><th></th></tr>"
        dtb.children[1].innerHTML = ""
        if (curData.length == 0) {
            dtbDatas = new DataTable('#dtbDatas', {
                "columnDefs":
                    [
                        { "targets": "_all", "orderable": false },
                    ]
            })
            return
        }

        var strHead = "<tr><th>Date</th>"
        console.log(curData)
        var dateRows = {}
        //build head and row list 
        curData.forEach(s => {
            strHead += "<th>" + s.name + "</th>"
            s.data.forEach(dat => {
                if (!dateRows.hasOwnProperty(dat[0])) {
                    dateRows[dat[0]] = []
                }
            })
        })
        strHead += "<th>Overall Average</th></tr>"
        var dtbRows = []
        //build rows of table
        Object.keys(dateRows).forEach(k => {
            let irow = []
            irow.push(k)
            for (var i = 0; i < curData.length; i++) {
                let dt = [0, 0]
                curData[i].data.forEach(dat => {
                    if (dat[0] == k) {
                        dt = [dat[1], dat[2]]
                    }
                })
                irow.push(dt)
            }
            dtbRows.push(irow)
        })
        //average
        dtbRows.forEach(ro => {
            ro[0] = new Date(ro[0]).toLocaleDateString('en-GB', { timeZone: "Asia/Kuala_Lumpur" })
            let avg = 0
            let tcount = 0
            for (var idx = 1; idx < ro.length; idx++) {
                avg += ro[idx][0]
                tcount += ro[idx][1]
                ro[idx] = ro[idx][0].toFixed(2) + "%<br>" + ro[idx][1] + " student" + ((ro[idx][1] > 1) ? 's' : '')

            }
            avg = (avg / (ro.length - 1)).toFixed(1)
            ro.push(avg + "%<br>" + tcount + " student" + ((tcount > 1) ? 's' : ''))

        })
        dtb.children[0].innerHTML = strHead

        dtbDatas = new DataTable('#dtbDatas', {

            "columnDefs":
                [
                    { "targets": "_all", "orderable": false },
                ]
        })
        dtbRows.forEach(r => {
            dtbDatas.row.add(r)
        })
        dtbDatas.draw()

        //fill column 
    }

    function loadArea() {
        map.eachLayer(function (layer) {
            map.removeLayer(layer);
        });

        document.getElementById('mapdiv').style.display = "initial"

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        var color = LineChart.getModel().getSeries().map(s => {
            return {
                id: s.id,
                seriesColor: LineChart.getVisual({
                    seriesIndex: s.seriesIndex
                }, 'color')
            }
        })
        let haveMapData = false
        var curData = JSON.parse(JSON.stringify(LineChart.getOption().series))
        curData.forEach(data => {
            if (data.id) {
                haveMapData = true
                let curcolor = "#f0f0f0"
                color.forEach(c => {
                    if (c.id == data.id.toString()) {
                        curcolor = c.seriesColor
                    }
                })
                if (data.name.includes('<br>')) {
                    data.name = data.name.split('<br>')[0]
                }
                loadAreaPolygon(data.id, curcolor, data.name)
            }
        })
        if (!haveMapData) {
            document.getElementById('mapdiv').style.display = "none"
        }

        //  mapLayer.addData(polygon)
    }
    function loadAreaPolygon(areaId, color, areaname) {

        Server.request('GET', '/api/address/geo/area?id=' + areaId, null, true).then(
            function (result) {
                result = JSON.parse(result)
                console.log(result)
                if (result.coord) {
                    let mark = new L.marker(new L.LatLng(result.coord.y, result.coord.x)).bindPopup("<b>" + areaname + "</b><br>Latitude:" + result.coord.y + "<br>Logitude:" + result.coord.x).addTo(map);
                    mark.on('mouseover', function (e) {
                        mark.openPopup()
                    })
                    map.setView([result.coord.y, result.coord.x], 13)
                }
                if (result.areaPolygon) {
                    //convert format
                    var tmpCoord = []

                    result.areaPolygon[0].forEach(item => {
                        tmpCoord.push([item.x, item.y])
                    })
                    var polygon = newPolygon()
                    polygon[0].coordinates[0] = tmpCoord


                    var myStyle = {
                        "color": color,
                    };
                    L.geoJSON(polygon, {
                        style: myStyle
                    }).addTo(map)
                }
                else {
                    Swal.fire({
                        type: 'info',
                        title: 'There is no mapping data on this area ' + areaId + ' yet'
                    })
                }

            }
        ).catch(function (err) {
            console.log(err)
            Swal.fire({
                type: 'error',
                title: 'Failed',
                text: 'Unable to load area info'
            })
        })
    }
    var ii = 0
    function testFunc() {
        //    loadArea()
        return
        console.log(LineChart.getOption().series)
        console.log(
            LineChart.getOption().series[0].id)
        resetChartData()
        return
        ii++
        var newt = newSeries('btn' + ii, data3)
        lineChartOption.series.push(newt)
        LineChart.setOption(lineChartOption)
        console.log(LineChart.getModel().getSeries().map(s => {
            return {
                seriesIndex: s.seriesIndex,
                seriesColor: LineChart.getVisual({
                    seriesIndex: s.seriesIndex
                }, 'color')
            }
        }))
    }

    async function addStudentHandler() {
        var addByid = await Swal.fire({
            title: 'Insert Identification No.',
            html: '<input  class="form-control text-center" type="text"  id="swalStudentId"/>',
            showCancelButton: true,
            preConfirm: function () {
                return new Promise(function (resolve) {
                    resolve([
                        $('#swalStudentId').val()
                    ])
                })
            }
        })
        if (addByid.dismiss) {
            return;
        }
        loadNewIndividualData(addByid.value[0])
    }

    //school
    function changeStateSchool(e) {
        console.log('ss')
        if (e.target.value == '-1') {
            return;
        }
        Server.request('GET', '/api/address/county?stateCode=' + e.target.value, null, true).then(function (result) {
            result = JSON.parse(result)
            console.log(result)
            let strhtml = ""
            result.forEach(c => {
                strhtml += '<option value="' + c.countyId + '">' + c.name + '</option>'
            })
            document.getElementById('selectCounty').innerHTML = strhtml
        }).catch(function (err) {
            Message.createNew('Eror', 'Failed to recieve county list', 3)
            console.log(err)
        })
    }


    function loadSchool() {
        var countyId = document.getElementById('selectCounty').value
        if (!countyId) {
            Swal.fire({
                type: 'error',
                title: 'no county selected'
            })
        }
        Server.request("GET", "/api/school/county?id=" + countyId, null, true).then(function (value) {
            var data = JSON.parse(value);
            console.log(data)

            if (data.length == 0) {
                Swal.fire({
                    type: 'warning',
                    title: 'No Data',
                    text: "There's no existing school data in selected county"
                })
            }
            tableSchool.clear();
            var tmpRow;

            data.forEach(qSchool => { //temporary
                tmpRow = tableSchool.row.add([
                    qSchool.fullName,
                    qSchool.abbrv,
                    '<button class="btn btn-outline-success" style="vertical-align: middle;border-radius:50%" onclick="addSchoolData(event);" id="' + qSchool.schoolId + '"><b><i class="fa fa-plus" style="font-size: 17px;"></i></b></button>'
                ]).node()
                // tmpRow.id = qSchool.subjectCode; //letak id
            })
            tableSchool.draw();
            console.log(data)
        }
        ).catch(function (value) {
            console.log(value);
            tableSchool.clear();
            tableSchool.draw();
            try {
                value = JSON.parse(value)
                if (value.error) {
                    Swal.fire({
                        type: 'warning',
                        title: value.error
                    })
                }
            } catch {

            }
        });
    }



    //analysis data loading

    function loadNewAreaData() {
        var areaId = document.getElementById('idListArea').dataset.selected
        var areaname = document.getElementById('SSArea').value
        if (areaId == '-1') {
            Message.createNew('Invalid Area id', '', 3)
            return
        }
        var subjcode = document.getElementById('idListSubj').dataset.selected
        if (subjcode == '-1') {
            Message.createNew('No subject Selected', '', 3)
            return
        }
        var year = document.getElementById('selYear').value
        console.log(year)
        Server.request('GET', '/api/assessment/report/area?areaId=' + areaId + '&subjCode=' + subjcode + '&year=' + year, null, true).then(function (result) {
            result = JSON.parse(result)
            console.log(result)
            if (result.length == 0) {
                return
            }
            let converted = []
            result.forEach(res => {
                converted.push([res.date, res.percent * 100, res.studentCount])
            })
            console.log('conv')
            console.log(converted)
            let newData = newSeries(areaId, areaname, converted)
            lineChartOption.series.push(newData)
            redrawChart()
            loadedDataDone()
        }).catch(function (err) {
            console.log(err)
            try {
                err = JSON.parse(err)
                if (err.error == "no data") {
                    Swal.fire({
                        type: 'warning',
                        title: 'No record meets the criteria'
                    })
                }
            } catch {

            }
        })


    }

    function loadNewIndividualData(studentId) {
        var subjcode = document.getElementById('idListSubj').dataset.selected
        if (subjcode == '-1') {
            Message.createNew('No subject Selected', '', 3)
            return
        }
        var year = document.getElementById('selYear').value
        Server.request('GET', '/api/assessment/report/individual?studentId=' + studentId + '&subjCode=' + subjcode + '&year=' + year, null, true).then(
            function (result) {
                result = JSON.parse(result)
                console.log(result)
                let converted = []
                result.forEach(res => {
                    converted.push([res.date, res.percent * 100, 1])
                })
                let newData = newSeries(null, result[0].studentId + '<br>' + result[0].name, converted)
                lineChartOption.series.push(newData)
                redrawChart()
                loadedDataDone()

            }
        ).catch(function (err) {
            console.log(err)
            try {
                err = JSON.parse(err)
                if (err.error == "no data") {
                    Swal.fire({
                        type: 'warning',
                        title: 'No record meets the criteria'
                    })
                }
            } catch {

            }
        })
    }

    function loadedDataDone() {
        //document.getElementById('btnData').style.display = "none"
        document.getElementById('btnReset').style.display = "inline-block"
    }

    function addSchoolData(e) {
        console.log(e.target.id)
        var sname = e.target.parentElement.parentElement.children[1].innerHTML.trim()
        console.log(sname)
        var year = document.getElementById('selYear').value
        var subjCode = document.getElementById('idListSubj').dataset.selected
        if (subjCode == '-1') {
            Swal.fire({
                type: 'error',
                title: 'Invalid Subject',
                text: 'Please select a subject first'
            })
            return
        }
        Server.request("GET", "/api/assessment/report/school?schoolId=" + e.target.id + "&subjCode=" + subjCode + "&year=" + year, null, true).then(function (result) {
            result = JSON.parse(result)
            let converteds = {}
            result.forEach(d => {
                if (!converteds.hasOwnProperty(d.areaName)) {
                    converteds[d.areaName] = { areaId: d.areaId, data: [] }
                    converteds[d.areaName].data = []
                }
                converteds[d.areaName].data.push([d.date, d.percent * 100, d.studentCount])
            })
            Object.keys(converteds).forEach(k => {
                let newData = new newSeries(converteds[k].areaId, k + "<br>" + sname, converteds[k].data)

                lineChartOption.series.push(newData)
            })
            redrawChart()
            loadedDataDone()
        }).catch(function (err) {
            console.log(err)
            try {
                err = JSON.parse(err)
                if (err.error == "no data") {
                    Swal.fire({
                        type: 'warning',
                        title: 'No record meets the criteria'
                    })
                }
            } catch {

            }
        })
    }

    function rtypeChange(e) {
        if (e.target.value == '2') {
            document.getElementById('selectSubject').disabled = false
        }
        else {
            document.getElementById('selectSubject').disabled = true
        }
        resetChartData()
    }

    function resetChartData() {
        document.getElementById('btnReset').style.display = 'none'
        // document.getElementById('btnData').style.display = 'initial'
        lineChartOption.series = []
        redrawChart()
    }

    function redrawChart() {
        LineChart.setOption(lineChartOption, true)
        loadDataToTable()
        loadArea()
    }
    window.addEventListener('resize', function () {
        setTimeout(function () { map.invalidateSize() }, 400);
        setTimeout(function () { LineChart.resize() }, 400)
    });

    var data3 = [
        //3rd value letak assessment/student name
        ['2021-05-20T20:40:33Z', 13, 1],
        ['2021-07-10T20:40:53Z', 19, 2],
        ['2021-09-10T20:44:03Z', 66, 2],
        ['2021-09-10T20:44:03Z', 78, 5],
        ['2021-12-10T20:41:03Z', 98, 2],
        ['2021-10T20:45:03Z', 33, 3]
    ]
    var lineChartOption = {
        legend: {
            // Try 'horizontal'
            type: 'scroll',
            orient: 'horizontal',
            right: 10,
            formatter: function (name) {
                if (name.includes('<br>')) {
                    name = name.split('<br>')
                    name = name[0] + '\n' + name[1]
                }
                return name
            }
        }, grid: { containLabel: true },
        tooltip: {
            trigger: 'axis',
            formatter: function (d) {
                let ttip = ""
                let tcount = 0
                let avg = 0
                let dt = null
                d.forEach(s => {
                    if (!dt) {
                        dt = s.data[0]
                    }
                    ttip += '<u style="color:' + s.color + '"><b>' + s.seriesName + "</u></b><br>Average Mark: "
                        + s.data[1].toFixed(2) + "%<br>Student Count: " + s.data[2] + "<br>"

                    avg += s.data[1]
                    tcount += s.data[2]

                })
                ttip += "<br><b>Total Of " + tcount + " student" + ((tcount > 1) ? 's' : '') + "</b>"
                ttip += "<br><b>Overall Average Percentage: " + (avg / d.length).toFixed(1) + "%</b>"
                ttip += "<br><b>Date Assessed: " + new Date(dt).toLocaleDateString('en-GB', { timeZone: "Asia/Kuala_Lumpur" }) + "</b>"
                return ttip;

            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'time'
        },
        yAxis: {
            type: 'value'
        },
        series: [
        ]
    }

    function newSeries(seriesId, name, inpData) {
        MergeDate(inpData)
        if (!seriesId) {
            return {
                name: name,
                type: 'line',
                smooth: true,
                connectNulls: true,
                data: inpData
            }
        }
        return {
            name: name,
            id: seriesId,
            type: 'line',
            smooth: true,
            connectNulls: true,
            data: inpData
        }
    }

    function MergeDate(arrData) {
        //merge by date average percent total count
        let norm = false
        while (!norm) {
            for (var i = 1; i < arrData.length; i++) {
                if (arrData[i][0] == arrData[i - 1][0]) {
                    arrData[i - 1][1] = (arrData[i][1] + arrData[i - 1][1]) / 2
                    arrData[i - 1][2] = arrData[i][2] + arrData[i - 1][2]
                    arrData.splice(i, 1);
                    MergeDate(arrData)
                    break;
                }
            }
            norm = true
        }
    }

    //address

    function resetPostcode() {
        document.getElementById("SSPostcode").disabled = true;
        document.getElementById("SSPostcode").value = "";
        document.getElementById("idListPostcode").innerHTML = ""
        document.getElementById("idListPostcode").dataset.selected = "-1"
    }
    function resetArea() {
        document.getElementById("SSArea").disabled = true;
        document.getElementById("SSArea").value = "";
        document.getElementById("idListArea").innerHTML = ""
        document.getElementById("idListArea").dataset.selected = "-1"
    }

    function changePostcode(e) {
        if (e.target.value == '-1') {
            resetArea()
            return;
        }
        document.getElementById("SSArea").disabled = false;

        var postcode = document.getElementById(e.target.dataset.list).dataset.selected;
        getAreaInPostcode(postcode).then(function (result) {
            result = JSON.parse(result)
            var strhtml = ""
            result.forEach(area => {
                strhtml += '<li id="' + area.areaId + '">' + area.areaName + '</li>'
            });
            document.getElementById("idListArea").innerHTML = strhtml
        }).catch(function (err) {
            console.log(err)
        })
        console.log(postcode)
    }

    function changeState(e) {
        resetArea()
        resetPostcode()
        if (e.target.value == '-1') {
            return;
        }
        document.getElementById("SSPostcode").disabled = false;
        getPostcodes(e.target.value).then(function (result) {
            result = JSON.parse(result)
            var strhtml = ""
            result.forEach(pcode => {
                strhtml += '<li id="' + pcode.postcode + '">' + pcode.postcode + ' ' + pcode.postOffice + '</li>'
            });
            document.getElementById("idListPostcode").innerHTML = strhtml
        }).catch(function (err) {
            console.log(err)
        })
    }

</script>