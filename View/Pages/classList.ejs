<style>
    button * {
        pointer-events: none;
    }
</style>

<div class="side-app" onload="setup()">

    <div id="ejsData" data-school="<%= JSON.stringify(school) %> "></div>
    <!-- header -->
    <div class="row">
        <div class="col-md-10 col-xl-10">
            <h1 class="page-title mb-6" style="font-size: 30px;">Class</h1>
        </div>

        <div class="col-md-2 col-xl-2 text-right">
            <button type="button" class="btn btn-pill btn-secondary-light" data-toggle="modal"
                data-target="#modal_classDetails">
                <i class="fa fa-plus mr-2"><b style="font-family: sans-serif;">&nbsp;Class</b></i>
        </div>
    </div>
    <!-- /header -->

    <!-- ROW-table -->
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12 col-xl-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Class List</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover text-nowrap mb-0" id="dtbClassList">
                                    <thead class="bg-primary">
                                        <p class="text-red">**Click class name to update data.</p>
                                        <tr>
                                            <th width="20%" class="text-center text-white">Class Name</th>
                                            <th width="50%" class="text-white">Teacher</th>
                                            <th width="10%" class="text-center text-white">Total Students</th>
                                            <th width="10%" class="text-white text-center">Delete</th>
                                            <th width="10%" class="text-white text-center">Class Details</th>
                                        </tr>
                                    </thead>
                                    <tbody class="mycustom_tbd">
                                    </tbody>
                                </table>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- ROW-4 END -->
</div>


<!-- MODAL -->
<div class="modal fade" id="modal_classDetails" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content modal-md">
            <div class="modal-header bg-info">
                <h5 class="modal-title text-white" id="exampleModalLabel">Class Registration</h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-6 col-md-12">
                        <div class="form-group">
                            <label for="exampleInputname">Class Name</label>
                            <input type="text" class="form-control" id="txtnameclass">
                        </div>
                    </div>

                    <div class="col-lg-6 col-md-12">
                        <div class="form-group">
                            <label for="exampleInputname">Teacher</label>
                            <select class="form-control select2-show-search" id="selTeacher">
                                <optgroup>
                                </optgroup>
                            </select>
                        </div>
                    </div>

                </div>
            </div>

            <div class="modal-footer text-white" style="justify-content: center;">
                <a class="btn btn-warning mt-1" data-dismiss="modal">Cancel</a>
                <a class="btn btn-primary" onclick="registerClass()" id="btnRegister"><b><i
                            class="fa fa-plus"></i>&nbsp;Class</b></a>
                <a class="btn btn-success text-white" onclick="updateClass()" id="btnUpdate"
                    style="display: none;"><b><i class="fa fa-floppy-o"></i>&nbsp;Class</b></a>
            </div>
        </div>
    </div>
</div>

<script>
    var ejsData
    var school
    var dtbClassList
    var selectedClassId

    function setup() {

        ejsData = JSON.parse(JSON.stringify(document.getElementById("ejsData").dataset))
        document.getElementById("ejsData").remove()
        school = JSON.parse(ejsData.school)
        console.log(school)
        dtbClassList = new DataTable('#dtbClassList', {
            "columnDefs": [{
                "targets": [2, 3],
                "searchable": false
            },
            {
                "targets": [0, 2, 3, 4],
                "targets": [0, 2, 3, 4],
                "className": "text-center"
            }
            ]
        })

        loadTeacher();
        loadClass();
    }

    function goToClassDetails(event) {
        navigate('/classDetails?cid=' + event.target.id)
    }

    function loadClass() {
        console.log("load");

        schoolId = JSON.stringify(school.schoolId);
        var data = {
            "schoolId": schoolId
        }

        Server.request("POST", "/api/class/getClassBySchool", data, false).then(function (value) {
            var data = JSON.parse(value);
            console.log(data)
            dtbClassList.clear();

            if (data.length == 0) {
                Swal.fire({
                    type: 'warning',
                    title: 'No Data',
                    text: "There's no existing school data in selected county"
                })
            }

            var tmpRow;

            data.forEach(qClass => { //temporary
                tmpRow = dtbClassList.row.add([
                    '<button onclick="getClass(event)" id="' + qClass.classId + '"><b style="vertical-align: middle;">' + qClass.className + '</b></button>',
                    qClass.name,
                    qClass.total,
                    '<button class="btn btn-danger" style="vertical-align: middle;" onclick="deleteClass(event);" id="' + qClass.classId + '"><b><i class="fa fa-trash" style="font-size: 17px;"></i></b></button>',
                    '<button class="btn btn-secondary" style="vertical-align: middle;" onclick="goToClassDetails(event);" id="' + qClass.classId + '"><b><i class="fa fa-pencil" style="font-size: 17px;"></i></b></button>'
                ]).node()
                tmpRow.id = qClass.classId; //letak id 
            })
            dtbClassList.draw();
        }
        ).catch(function (value) {
            console.log(value);
            dtbClassList.clear();
            dtbClassList.draw();
            try {
                value = JSON.parse(value)
                if (value.error) {
                    Swal.fire({
                        type: 'warning',
                        title: value.error
                    })
                }
            } catch {

            }
        });
    }

    function loadTeacher() {

        schoolId = JSON.stringify(school.schoolId);
        var data = {
            "schoolId": schoolId
        }

        Server.request("POST", "/api/class/getTeacher", data, false).then(function (value) {
            var data = JSON.parse(value);
            var strHtmlRads = "";
            strHtmlRads += '<option value="-1" selected>Select Teacher</option>'

            data.forEach(qTeacher => {
                strHtmlRads += '<option value="' + qTeacher.accountId + '">' + qTeacher.name + '</option>'
            })

            document.getElementById("selTeacher").innerHTML = strHtmlRads;
        })
    }

    async function registerClass() {

        var action = await Swal.fire({
            type: 'question',
            title: 'Confirm Registration',
            text: 'Register new class into the system?',
            showCancelButton: true
        })
        if (action.dismiss) {
            return;
        }

        var accountId = document.getElementById("selTeacher").value;
        var className = document.getElementById("txtnameclass").value;
        schoolId = JSON.stringify(school.schoolId);

        var data = {
            "schoolId": schoolId,
            "className": className,
            "accountId": accountId
        }

        Server.request("POST", "/api/class/register", data, true).then(async function (value) {
            console.log(value)

            var action = await Swal.fire({
                type: 'success',
                title: 'Registered Successfully!',
                text: '',
                showCancelButton: false
            })
            document.getElementById("selTeacher").value = "";
            document.getElementById("txtnameclass").value = "";
            $('#modal_classDetails').modal('hide');//ni auto tutup balek modal after register\
            loadClass();

        }).catch(async function (value) {
            console.log(value);
            value = JSON.parse(value);
            if (value.hasOwnProperty("validationError")) {
                displayValidationError(value);
            }
            else {
                //Message.createNew("Error", value, 3);
                var action = await Swal.fire({
                type: 'error',
                title: 'Cannot Updated!',
                text: 'An Error has occured',
                showCancelButton: false
            })
            }
        })
    }

    async function getClass(event) {
        var action = await Swal.fire({
            type: 'question',
            title: 'Update this class?',
            text: 'Directing to update form',
            showCancelButton: true
        })
        if (action.dismiss) {
            return;
        }

        var data = {
            "classId": event.target.id
        }

        var row = event.target.parentElement.parentElement;

        $('#modal_classDetails').modal('show');

        //finding name by text
        var textToFind = row.children[1].innerHTML;

        var dd = document.getElementById('selTeacher');
        for (var i = 0; i < dd.options.length; i++) {
            if (dd.options[i].text === textToFind) {
                dd.selectedIndex = i;
                break;
            }
        }

        document.getElementById("txtnameclass").value = event.target.children[0].innerHTML;
        document.getElementById("btnUpdate").style.display = "inline-block";
        document.getElementById("btnRegister").style.display = "none";

        selectedClassId = event.target.id;
    }

    async function updateClass() {
        var action = await Swal.fire({
            type: 'question',
            title: 'Confirm Update?',
            text: 'This class will be updated into the system',
            showCancelButton: true
        })
        if (action.dismiss) {
            return;
        }

        var accountId = document.getElementById("selTeacher").value;
        var className = document.getElementById("txtnameclass").value;

        var data = {
            "classId": selectedClassId,
            "className": className,
            "accountId": accountId
        }

        Server.request("POST", "/api/class/update", data, false).then(async function (value) {
            console.log('Updated');

            document.getElementById("txtnameclass").value = "";
            document.getElementById("selTeacher").value = "";
            document.getElementById("btnUpdate").style.display = "none";
            document.getElementById("btnRegister").style.display = "inline-block";
            $('#modal_classDetails').modal('hide');
            loadClass();

            var action = await Swal.fire({
                type: 'success',
                title: 'Updated Successfully!',
                text: '',
                showCancelButton: false
            })

            //loadTopic(document.getElementById("selSubjectCode").value);

        }).catch(async function (value) {
            var action = await Swal.fire({
                type: 'error',
                title: 'Cannot Updated!',
                text: 'An Error has occured',
                showCancelButton: false
            })
        })
    }

    async function deleteClass(event) {

        var action = await Swal.fire({
            type: 'question',
            title: 'Confirm Delete?',
            text: 'This class will be removed from the system',
            showCancelButton: true
        })
        if (action.dismiss) {
            return;
        }

        var data = {
            "classId": event.target.id
        }

        Server.request("POST", "/api/class/delete", data, false).then(async function (value) {
            var action = await Swal.fire({
                type: 'success',
                title: 'Deleted Successfully!',
                text: '',
                showCancelButton: false
            })
            loadClass();

        }).catch(async function (value) {
            var action = await Swal.fire({
                type: 'error',
                title: 'Cannot Deleted!',
                text: 'An Error has occured',
                showCancelButton: false
            })
        })

    }

</script>